//AP[i]=1 if ith vertex is articular point, vector "bridge" contains all bridges in sorted order
// tutorial link : https://www.hackerearth.com/practice/algorithms/graphs/articulation-points-and-bridges/tutorial/

#include<bits/stdc++.h>
using namespace std;

#define si(n) scanf("%d",&n)
#define MAX 200005

int n,m;
vector<int>gr[MAX];
int disc[MAX],low[MAX];
int AP[MAX];
vector<pair<int,int> >bridges;

void go(int now,int from,int cnt)
{
    disc[now]=low[now]=cnt;
    int child=0;
    for(int i=0;i<gr[now].size();i++){
        int to=gr[now][i];
        if(disc[to]){
            if(to!=from)low[now]=min(low[now],disc[to]);
            continue;
        }
        go(to,now,cnt+1);
        child++;
        low[now]=min(low[now],low[to]);
        if(low[to]>=disc[now]){
            AP[now]=1;
            int u=now,v=to;
            if(u>v)swap(u,v);
            if(low[to]>disc[now])bridges.push_back(make_pair(u,v));
        }
    }
    if(from==-1){
        if(child>1)AP[now]=1;
        else AP[now]=0;
    }
}

int main()
{
    //freopen("input.txt","r",stdin);
    int i,j,t;
    si(t);
    for(int cs=1;cs<=t;cs++){
        for(i=1;i<MAX;i++)gr[i].clear();
        memset(disc,0,sizeof(disc));
        memset(AP,0,sizeof(AP));
        bridges.clear();

        si(n);si(m);
        for(i=1;i<=m;i++){
            int u,v;
            si(u);si(v);
            gr[u].push_back(v);
            gr[v].push_back(u);
        }

        for(i=1;i<=n;i++){
            if(disc[i])continue;
            go(i,-1,1);
        }
        int tot_AP=0;
        for(i=1;i<=n;i++){
            tot_AP+=AP[i];
        }
        printf("Case %d: ",cs);
        printf("%d\n",tot_AP);
    }

}

