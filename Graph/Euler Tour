/*
    from pritom 
    
    theory : https://www.wikiwand.com/en/Eulerian_path#/Hierholzer.27s_algorithm
    --> Hierholzer's algorithm: Finding Euler tour in a graph
    --> Complexity: O(V+E)
    --> A Eulerian path is a path in a graph that passes through all of its edges exactly once.
    --> An Eulerian cycle exists if and only if the degrees of all vertices are even. And an Eulerian path exists if and only if
        the number of vertices with odd degrees is two (or zero, in the case of the existence of a Eulerian cycle). In addition,
        of course, the graph must be sufficiently connected.
    --> Hierholzer's algorithm: 
    
    --> Solved Problem : https://codeforces.com/contest/1152/problem/E
*/

#include<bits/stdc++.h>
using namespace std;

#define si(n) scanf("%d",&n)
#define MAX 100005
#define f first
#define s second

struct Edge {
    int u, v;
    int other(int x) {return u^v^x;}
};

int n;
vector<Edge> edges;
bool vis[MAX];
vector<int> adj[MAX];
stack<int> st;


void addEdge(int u, int v) {
    edges.push_back({u, v});
    int id = edges.size()-1;
    adj[u].push_back(id);
    adj[v].push_back(id);
}

bool getTour(vector<int> &path) {
    int u=1,cnt=0;
    for (int i=1;i<=n;i++){
        if(adj[i].size()%2) {
            u=i;
            ++cnt;
        }
    }

    if (cnt !=0 && cnt != 2)    return false;

    path.clear();

    while (true) {
        while (adj[u].size() && vis[adj[u].back()] == 1)    adj[u].pop_back();
        if (adj[u].empty()) {
            path.push_back(u);
            if (st.empty()) break;
            u = st.top();
            st.pop();
        }
        else {
            st.push(u);
            int id = adj[u].back();
            vis[id] = 1;
            u = edges[id].other(u);
        }
    }

    for (int i=0; i<edges.size(); i++)
        if (!vis[i])
            return false;
    return true;
}


int b[MAX],c[MAX];
map<int,int>mp;
int rev_mp[MAX];

vector<int>ans;


int main()
{
    //freopen("input.txt","r",stdin);
    int i,j;
    si(n);
    for(i=1;i<n;i++)si(b[i]);
    for(i=1;i<n;i++)si(c[i]);

    int cnt=1;
    for(i=1;i<n;i++){
        if(b[i]>c[i])return cout<<-1<<endl,0;
        if(mp[b[i]]==0){mp[b[i]]=cnt++;rev_mp[cnt-1]=b[i];}
        if(mp[c[i]]==0){mp[c[i]]=cnt++;rev_mp[cnt-1]=c[i];}

        if(cnt>(n+1))return cout<<-1<<endl,0;

        addEdge(mp[b[i]],mp[c[i]]);
    }


    if(getTour(ans)==0){
        return cout<<-1<<endl,0;
    }

    for(auto xx : ans)
        printf("%d ",rev_mp[xx]);


}
